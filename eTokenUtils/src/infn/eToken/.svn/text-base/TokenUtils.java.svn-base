/**************************************************************************
Copyright (c) 2011: 
Istituto Nazionale di Fisica Nucleare (INFN), Italy
Consorzio COMETA (COMETA), Italy

See http://www.infn.it and and http://www.consorzio-cometa.it for details 
on the copyright holders.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Author(s): Giuseppe La Rocca (INFN), Salvatore Monforte (INFN)
 ****************************************************************************/
package infn.eToken;

import com.google.gson.annotations.Expose;
import org.apache.log4j.Logger;
import java.io.*;

import java.util.*;
import java.math.BigInteger;
import java.security.KeyPairGenerator;
import java.security.Provider;
import java.security.SecureRandom;
import java.security.Security;
import java.security.cert.X509Certificate;
import javax.security.auth.x500.X500Principal;
import org.bouncycastle.jce.PrincipalUtil;
import org.bouncycastle.openssl.PEMWriter;
import org.bouncycastle.util.encoders.Base64;
import org.bouncycastle.x509.X509V3CertificateGenerator;


import org.globus.gsi.proxy.ext.*;

public class TokenUtils {

  private static Logger log = Logger.getLogger(TokenUtils.class);

  private static class KeyPair_Cert {

    public KeyPair_Cert(
            java.security.PublicKey puK,
            java.security.PrivateKey prK,
            X509Certificate c) {
      publicKey = puK;
      privateKey = prK;
      cert = c;
    }

    void setPublic(java.security.PublicKey k) {
      publicKey = k;
    }

    void setPrivate(java.security.PrivateKey k) {
      privateKey = k;
    }

    java.security.PublicKey getPublic() {
      return publicKey;
    }

    java.security.PrivateKey getPrivate() {
      return privateKey;
    }

    void setX509Cert(X509Certificate c) {
      cert = c;
    }

    X509Certificate getX509Cert() {
      return cert;
    }
    private java.security.PrivateKey privateKey;
    private java.security.PublicKey publicKey;
    private X509Certificate cert;
  }

  private static KeyPair_Cert getTokenData(
          String serialNumber,
          String tokenPIN,
          Provider eToken_PKCS11Provider) {
    KeyPair_Cert result = null;
    try {

      java.security.KeyStore keyStore = null;

      // Install the provider dynamically.
      // Create an instance of the provider with the appropriate configuration file
      log.debug("Smart Card    " + eToken_PKCS11Provider.getInfo());
      log.debug("Provider Name " + eToken_PKCS11Provider.getName());
      log.debug("Version       " + eToken_PKCS11Provider.getVersion());
      log.debug("Size          " + eToken_PKCS11Provider.size());

      keyStore = java.security.KeyStore.getInstance("PKCS11", eToken_PKCS11Provider);

      // Token Login
      keyStore.load(null, tokenPIN.toCharArray());

      Enumeration aliases = keyStore.aliases();

      // Check if alias contains TOKEN_SERIAL
      Boolean SerialMatchesAlias = false;
      String alias = null;

      for (Enumeration e = aliases; e.hasMoreElements() && !SerialMatchesAlias;) {
        alias = (String) e.nextElement();

        SerialMatchesAlias = serialNumber.equals(
                ((java.security.cert.X509Certificate) keyStore.getCertificate(alias)).getSerialNumber().toString());
      }

      if (SerialMatchesAlias && keyStore.isKeyEntry(alias)) {

        log.debug("Key entry " + alias + " detected. ");

        // Getting the X509Certificate
        X509Certificate cert = (X509Certificate) keyStore.getCertificate(alias);
        //Certificate[] certChain = keyStore.getCertificateChain(alias);

        log.debug("X509 SN ........ " + cert.getSubjectX500Principal().getName());
        log.debug("SN(2) .......... " + cert.getSubjectX500Principal().getName());
        log.debug("Issued by ...... " + cert.getIssuerDN());
        log.debug("Issuer(2) ...... " + cert.getIssuerX500Principal().getName());
        log.debug("Valid from ..... " + cert.getNotBefore());
        log.debug("Valid to ....... " + cert.getNotAfter());
        log.debug("Ser. Number .... " + cert.getSerialNumber());
        log.debug("Signature ...... " + cert.getSigAlgName());
        log.debug("Version ........ " + cert.getVersion());
        log.debug("OID ............ " + cert.getSigAlgOID());

        // Getting the Private Key from token.
        result = new KeyPair_Cert(
                cert.getPublicKey(),
                (java.security.PrivateKey) keyStore.getKey(alias, tokenPIN.toCharArray()),
                cert);
        log.debug(
                result.getPublic().getFormat() + " "
                + result.getPublic().getAlgorithm()
                + " public key:");
        log.debug(result.getPublic().toString());
      } else {
        log.error("Serial " + serialNumber + " not found!");
      }
    } catch (Exception e) {
      log.error(e.getMessage());
    }
    return result;
  }

  private static KeyPair_Cert createProxyCertificate(
          int keybit, Boolean rfc, int lifetime,
          X509Certificate tokenCert, java.security.PrivateKey tokenKey) {
    KeyPair_Cert result = null;

    try {

      // Generate the new KeyPair
      Provider bc = new org.bouncycastle.jce.provider.BouncyCastleProvider();
      java.security.KeyPairGenerator kpGen = KeyPairGenerator.getInstance("RSA", bc);
      SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
      kpGen.initialize(keybit, secureRandom);

      java.security.KeyPair pair = kpGen.generateKeyPair();

      // --------------------------------------------------------
      // 	Generate the Proxy Certificate
      // --------------------------------------------------------
      X509V3CertificateGenerator certGen = new X509V3CertificateGenerator();
      Random rand = new Random();

      // Initialize the SerialNumber of the certificate.
      BigInteger serialNum = new BigInteger(20, rand);

      // Set the serial Number for the certificate
      certGen.setSerialNumber(serialNum);


      // Express the validity in milliseconds
      long validity = lifetime * 60 * 60 * 1000;

      Date lastDate = new Date();
      lastDate.setTime(lastDate.getTime() + validity);

      // Set the validity of the certificate
      certGen.setNotBefore(new Date(System.currentTimeMillis()));
      certGen.setNotAfter(lastDate);

      // Set the public key for the certificate.
      certGen.setPublicKey(pair.getPublic());

      // Build up the structure describing the proxy nature.
      ProxyPolicy policy = new ProxyPolicy(ProxyPolicy.IMPERSONATION);
      ProxyCertInfo proxyCertInfo = new ProxyCertInfo(policy);

      if (rfc) {
        // RFC-3280-compliant OID
        org.globus.gsi.X509Extension x509Ext = new ProxyCertInfoExtension(proxyCertInfo);
        // Adding Extentions to the Certification Request
        certGen.addExtension(x509Ext.getOid(), x509Ext.isCritical(), x509Ext.getValue());

        // Create the distinguished name (DN) of the proxy certificate.
        // This DN is the issuer's DN with an extra "CN=" part, which
        // value is a random integer.
        // In the RFC2253 the "CN=" part comes at the beginning.
        String issuerDN = tokenCert.getSubjectX500Principal().getName();
        String delegDN = String.valueOf(Math.abs(rand.nextInt()));
        //RFC 3820 compliant impersonation proxy!
        String proxyDN = "CN=" + delegDN + "," + issuerDN;
        log.debug("Creating a RFC-3280-compliant OID self-signed certificate for: ");
        log.debug(proxyDN);

        // Set the subject distinguished name.
        // The subject describes the entity associated with the public key.
        certGen.setSubjectDN(new X500Principal(proxyDN));

      } else {
        // Proxy draft (pre-RFC) compliant impersonation proxy
        //org.globus.gsi.X509Extension x509Ext = new GlobusProxyCertInfoExtension (proxyCertInfo);
        // Adding Extentions to the Certification Request
        //certGen.addExtension (x509Ext.getOid(), x509Ext.isCritical(), x509Ext.getValue());

        // Create the distinguished name (DN) of the proxy certificate.
        // This DN is the issuer's DN with an extra "CN=proxy" part.
        // In the pre-RFC the "C/N=proxy" part comes at the beginning.
        String issuerDN = tokenCert.getSubjectX500Principal().getName();
        //Proxy draft (pre-RFC) compliant impersonation proxy
        String proxyDN = "CN=proxy," + issuerDN;
        log.debug("Creating a fully legacy Globus proxy for: ");
        log.debug(proxyDN);
        // Set the subject distinguished name.
        // The subject describes the entity associated with the public key.
        certGen.setSubjectDN(new X500Principal(proxyDN));
        log.debug("SubjectDN = " + new X500Principal(proxyDN).getName());
      }

      // Set the Issuer distinguished name.
      // The issuer is the entity whose private key is used to sign the certificate.
      certGen.setIssuerDN(tokenCert.getSubjectX500Principal());
      log.debug("IssuerDN = " + tokenCert.getSubjectX500Principal().getName());

      // Set the signature of the new certificate
      certGen.setSignatureAlgorithm(tokenCert.getSigAlgName());

      // Generate the Proxy Certificate.
      java.security.cert.X509Certificate cert = certGen.generate(tokenKey);

      result = new KeyPair_Cert(
              pair.getPublic(), pair.getPrivate(), cert);

    } catch (Exception e) {
      log.error(e.getMessage());
    }
    return result;
  } // End method

  public static class ACInfo {

    public ACInfo(String vo, Collection<String> fqans) {
      this.vo = vo;
      this.fqans = fqans;
    }
    @Expose
    String vo = null;
    @Expose
    Collection<String> fqans = null;
  }

  public static class TokenInfo {

    public TokenInfo(String serial, 
                     String subject, 
                     String label,
                     String issuer,
                     String validfrom,
                     String validto,
                     String signature,
                     String oid,
                     String publiccert,
                     String conf, 
                     Collection<ACInfo> a) {
        
      this.serial = serial;
      this.subject = subject;
      this.label = label;
      this.issuer = issuer;
      this.validfrom = validfrom;
      this.validto = validto;
      this.signature = signature;
      this.oid = oid;
      this.publiccert = publiccert;
      this.conf = conf;
      this.attributes = a;
    }
    @Expose
    String serial = null;
    @Expose
    String subject = null;   
    @Expose
    String label = null;
    @Expose
    String issuer = null;
    @Expose
    String validfrom = null;
    @Expose
    String validto = null;
    @Expose
    String signature = null;
    @Expose
    String oid = null;
    @Expose
    String publiccert = null;
    @Expose
    Collection<ACInfo> attributes = null;
    String conf = null;
  }

  public static HashMap<String, TokenInfo> 
          getTokenInfoMap(String tokenConfigPath, String tokenPIN, 
                          HashMap<String, Properties> vomses_map) {
    
    // Save the default list of providers
    Set<Provider> providersBackup = new HashSet<Provider>();
    providersBackup.addAll(Arrays.asList(Security.getProviders()));

    HashMap<String, TokenInfo> result = new HashMap<String, TokenInfo>();

    File[] configs = new File(tokenConfigPath).listFiles();

    // Reading each tokenConf file..
    for (File tokenConf : configs) {        
      // Creating an HashMap with:
      // SerialNumber (key)
      // [SERIAL, LABEL, SUBJECT, ISSUER, VALIDFROM, VALIDTO, SIGNATURE, OID, PUBLICCERT] (Properties)
      HashMap<String, Properties> map = 
              getSerial2PropertiesMap(tokenConf.toString(), tokenPIN);

      log.debug(" "); 
      log.debug("CONTACTING each VOMS server to retrieve groups/roles");
      
      for (Map.Entry<String, Properties> entry : map.entrySet()) {

        Collection<ACInfo> attributes = null;

        for (Map.Entry<String, Properties> voms : vomses_map.entrySet()) {
          
          log.debug("=> Retrieving from VOMS: " + 
                     voms.getValue().getProperty("VOMS_NAME") +
                    " FQANs for " +
                  entry.getValue().getProperty("SUBJECT"));
            
          String[] GroupsAndRoles = null;
          try {
            GroupsAndRoles = VOMSUtils.listGroupsAndRoles(
                    entry.getValue().getProperty("SUBJECT"),
                    entry.getValue().getProperty("ISSUER"),
                    voms.getValue());
          } catch (Exception e) {
            log.error(e);
            continue;
          }

          if (GroupsAndRoles != null) {

            ACInfo info = new ACInfo(
                    voms.getValue().getProperty("VOMS_NAME"),
                    java.util.Arrays.asList(GroupsAndRoles));

            if (attributes == null) {
              attributes = new ArrayList<ACInfo>();
            }
            attributes.add(info);
          }
        }
        // Feeding the HashMap..
        result.put(entry.getKey(), new TokenInfo(
                entry.getKey(),             
                entry.getValue().getProperty("SUBJECT"),
                entry.getValue().getProperty("LABEL"),
                entry.getValue().getProperty("ISSUER"),
                entry.getValue().getProperty("VALIDFROM"),
                entry.getValue().getProperty("VALIDTO"),
                entry.getValue().getProperty("SIGNATURE"),
                entry.getValue().getProperty("OID"),
                entry.getValue().getProperty("PUBLICCERT"),
                tokenConf.toString(),
                attributes));                
      }
    }        
    
    // Restore the original list of prividers
    Set<Provider> providers = new HashSet<Provider>();
    providers.addAll(Arrays.asList(Security.getProviders()));
    providers.removeAll(providersBackup);
    for (Provider p : providers) {
      Security.removeProvider(p.getName());
    }
    return result;
  }

  public static HashMap<String, Properties> getSerial2PropertiesMap(String tokenConf, String tokenPIN) {
      
    java.security.KeyStore keyStore = null;

    // Install the provider dynamically.
    // Create an instance of the provider with the appropriate configuration file
    Provider eToken_PKCS11Provider = null;

    eToken_PKCS11Provider = new sun.security.pkcs11.SunPKCS11(tokenConf);

    HashMap<String, Properties> result = null;

    try {
      Security.insertProviderAt(eToken_PKCS11Provider, 1);
      keyStore = java.security.KeyStore.getInstance("PKCS11", eToken_PKCS11Provider);

      // Token Login
      keyStore.load(null, tokenPIN.toCharArray());

      java.security.KeyPairGenerator keyGenerator =
      java.security.KeyPairGenerator.getInstance("RSA", eToken_PKCS11Provider);
      log.debug(" ");
      log.debug("--------------------------------------------------------");
      log.debug("Smart Card    " + keyGenerator.getProvider().getInfo());
      log.debug("Provider Name " + keyGenerator.getProvider().getName());
      log.debug("Version       " + keyGenerator.getProvider().getVersion());
      log.debug("Size          " + keyGenerator.getProvider().size());

      // Retrieving certificate chains from e-Token
      // Get a list of key item(s) from the e-Token if any.
      Enumeration aliases = keyStore.aliases();

      // Check about the number of item(s) available on board of the eToken.
      if (keyStore.size() > 0)
      log.debug(keyStore.size() + " Key item(s) detected ");
      else log.error(" No key item(s) detected ");
      log.debug("--------------------------------------------------------");

      result = new HashMap<String, Properties>();

      for (Enumeration e = aliases; e.hasMoreElements();) {

        String alias = (String) e.nextElement();
        java.security.cert.X509Certificate cert = 
                ((java.security.cert.X509Certificate) keyStore.getCertificate(alias));

        Properties p = new Properties();
        p.setProperty("SERIAL", cert.getSerialNumber().toString());
        p.setProperty("LABEL", alias);
        p.setProperty("SUBJECT", "/" + PrincipalUtil.getSubjectX509Principal(cert).getName().replaceAll(",", "/"));
        p.setProperty("ISSUER", "/" + PrincipalUtil.getIssuerX509Principal(cert).getName().replaceAll(",", "/"));
        p.setProperty("VALIDFROM", cert.getNotBefore().toString());
        p.setProperty("VALIDTO", cert.getNotAfter().toString());
        p.setProperty("SIGNATURE", cert.getSigAlgName().toString());
        p.setProperty("OID", cert.getSigAlgOID().toString());
        p.setProperty("PUBLICCERT", cert.getPublicKey().toString());        
        
        // Feeding the HashMap 
        result.put(cert.getSerialNumber().toString(), p);
      }
    } catch (Exception e) {
      log.error(e.getMessage());
    }

    Security.removeProvider(eToken_PKCS11Provider.getName());
    return result;
  } // End method

  public static boolean createProxy(
          String filename,
          int keybit, Boolean rfc, int lifetime,
          String serialNumber, String tokenConf, String tokenPIN) {

    boolean result = false;

    Provider provider = new sun.security.pkcs11.SunPKCS11(tokenConf);

    KeyPair_Cert tokenData = tokenData = getTokenData(
            serialNumber, tokenPIN, provider);

    if (tokenData != null) {

      Security.addProvider(provider);
      KeyPair_Cert reqData = createProxyCertificate(
              keybit, rfc, lifetime, tokenData.getX509Cert(), tokenData.getPrivate());

      if (reqData != null) {

        File proxyFile = new File(filename);
        log.debug("Saving self-signed proxy certificate in " + filename);

        try {
          java.io.FileOutputStream fos = new FileOutputStream(proxyFile);
          org.bouncycastle.openssl.PEMWriter pemWriter =
                  new PEMWriter(new OutputStreamWriter(fos));

          // Export the certificate request
          pemWriter.writeObject(reqData.getX509Cert());

          // Export the Private Key used to sign the request
          pemWriter.writeObject(reqData.getPrivate());

          // Export the User Certificate from the token
          byte[] encoding = tokenData.getX509Cert().getEncoded();

          pemWriter.write("-----BEGIN CERTIFICATE-----\n");

          char[] bufX = new char[64];
          encoding = Base64.encode(encoding);

          for (int i = 0; i < encoding.length; i += bufX.length) {
            int index = 0;
            while (index != bufX.length) {
              if ((i + index) >= encoding.length) {
                break;
              }
              bufX[index] = (char) encoding[i + index];
              index++;
            }
            pemWriter.write(bufX, 0, index);
            pemWriter.write("\n");
          }

          pemWriter.write("-----END CERTIFICATE-----\n");
          pemWriter.close();

          result = true;
        } catch (Exception e) {
          log.error(e.getMessage());
        }
      }
      Security.removeProvider(provider.getName());
    }

    return result;
  } // End method
} // End Class

